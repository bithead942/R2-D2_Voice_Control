/*
   R2-D2 Voice Remote (in Helmet)
   by Bithead942

    Board:  Fio v3 3.3V/8MHz

  Remote control of the voice playback for the R2-D2 platform

  The FIO board interacts with the Xbee radio and is connected to the Easy VR 3.0 board.
  This sketch was auto-generated by the Easy VR commander after training the chip with the desired commands.
  Unused portions were removed.  First, the speaker must speak the trigger word - "R2".  Next, the speaker must
  speak a word from the list of commands (21 commands programmed).  The Easy VR chip interprets the command and
  sends values to the Fio via serial connection.  The sketch was modified to interact with the Xbee to send
  commands (integer value from a - k ASCII) associated with the spoken command word.

  PINS USED:
  Serial1 (Xbee)
  Tx            0
  Rx            1
  Easy VR RX   10
  Easy VR TX   11

*/

#include "Arduino.h"
#if !defined(SERIAL_PORT_MONITOR)
#error "Arduino version not supported. Please update your IDE to the latest version."
#endif

#include "SoftwareSerial.h"
SoftwareSerial voice_command(10, 11);  //RX, TX
#define pcSerial SERIAL_PORT_MONITOR

#define xbee Serial1

#include "EasyVR.h"

EasyVR easyvr(voice_command);

//Groups and Commands
enum Groups
{
  GROUP_0  = 0,
  GROUP_1  = 1,
};

enum Group0
{
  G0_R2D2 = 0,
};

enum Group1
{
  G1_CHEERFUL = 0,
  G1_COME_HERE = 1,
  G1_CONCERNED = 2,
  G1_DETERMINED = 3,
  G1_EUREKA = 4,
  G1_EXCITED = 5,
  G1_FART = 6,
  G1_FRAZZLED = 7,
  G1_HELLO = 8,
  G1_INTERESTED = 9,
  G1_LAUGH = 10,
  G1_PLAYFUL = 11,
  G1_QUESTION = 12,
  G1_READY = 13,
  G1_SAD = 14,
  G1_SARCASTIC = 15,
  G1_SASSY = 16,
  G1_SCREAM = 17,
  G1_SHOCKED = 18,
  G1_SHY = 19,
  G1_SURPRISE = 20,
};

// use negative group for wordsets
int8_t group, idx;

void setup()
{
  // setup PC serial port
  pcSerial.begin(9600);
bridge:
  // bridge mode?
  int mode = easyvr.bridgeRequested(pcSerial);
  switch (mode)
  {
    case EasyVR::BRIDGE_NONE:
      // setup EasyVR serial port
      voice_command.begin(9600);
      // run normally
      pcSerial.println(F("Bridge not requested, run normally"));
      pcSerial.println(F("---"));
      break;

    case EasyVR::BRIDGE_NORMAL:
      // setup EasyVR serial port (low speed)
      voice_command.begin(9600);
      // soft-connect the two serial ports (PC and EasyVR)
      easyvr.bridgeLoop(pcSerial);
      // resume normally if aborted
      pcSerial.println(F("Bridge connection aborted"));
      pcSerial.println(F("---"));
      break;

    case EasyVR::BRIDGE_BOOT:
      // setup EasyVR serial port (high speed)
      voice_command.begin(115200);
      pcSerial.end();
      pcSerial.begin(115200);
      // soft-connect the two serial ports (PC and EasyVR)
      easyvr.bridgeLoop(pcSerial);
      // resume normally if aborted
      pcSerial.println(F("Bridge connection aborted"));
      pcSerial.println(F("---"));
      break;
  }

  // initialize EasyVR
  while (!easyvr.detect())
  {
    pcSerial.println(F("EasyVR not detected!"));
    for (int i = 0; i < 10; ++i)
    {
      if (pcSerial.read() == '?')
        goto bridge;
      delay(100);
    }
  }

  pcSerial.print(F("EasyVR detected, version "));
  pcSerial.print(easyvr.getID());

  if (easyvr.getID() < EasyVR::EASYVR3)
    easyvr.setPinOutput(EasyVR::IO1, LOW); // Shield 2.0 LED off

  if (easyvr.getID() < EasyVR::EASYVR)
    pcSerial.print(F(" = VRbot module"));
  else if (easyvr.getID() < EasyVR::EASYVR2)
    pcSerial.print(F(" = EasyVR module"));
  else if (easyvr.getID() < EasyVR::EASYVR3)
    pcSerial.print(F(" = EasyVR 2 module"));
  else
    pcSerial.print(F(" = EasyVR 3 module"));
  pcSerial.print(F(", FW Rev."));
  pcSerial.println(easyvr.getID() & 7);

  easyvr.setDelay(0); // speed-up replies

  easyvr.setTimeout(5);
  easyvr.setLanguage(0); //<-- same language set on EasyVR Commander when code was generated

  group = EasyVR::TRIGGER; //<-- start group (customize)

  xbee.begin(9600);
  Serial.println("Ready!");
}

void loop()
{
  if (easyvr.getID() < EasyVR::EASYVR3)
    easyvr.setPinOutput(EasyVR::IO1, HIGH); // LED on (listening)

  if (group < 0) // SI wordset/grammar
  {
    pcSerial.print("Say a word in Wordset ");
    pcSerial.println(-group);
    easyvr.recognizeWord(-group);
  }
  else // SD group
  {
    pcSerial.print("Say a command in Group ");
    pcSerial.println(group);
    easyvr.recognizeCommand(group);
  }

  do
  {
    // allows Commander to request bridge on Zero (may interfere with user protocol)
    if (pcSerial.read() == '?')
    {
      setup();
      return;
    }
    // <<-- can do some processing here, while the module is busy
  }
  while (!easyvr.hasFinished());

  if (easyvr.getID() < EasyVR::EASYVR3)
    easyvr.setPinOutput(EasyVR::IO1, LOW); // LED off

  idx = easyvr.getCommand();
  if (idx >= 0)
  {
    // beep
    easyvr.playSound(0, EasyVR::VOL_FULL);
    // print debug message
    uint8_t train = 0;
    char name[32];
    pcSerial.print("Command: ");
    pcSerial.print(idx);
    if (easyvr.dumpCommand(group, idx, name, train))
    {
      pcSerial.print(" = ");
      pcSerial.println(name);
    }
    else
      pcSerial.println();
    // perform some action
    action();
  }
  else // errors or timeout
  {
    if (easyvr.isTimeout())
      pcSerial.println("Timed out, try again...");
    int16_t err = easyvr.getError();
    if (err >= 0)
    {
      pcSerial.print("Error ");
      pcSerial.println(err, HEX);
    }
    group = GROUP_0;
  }
}

void action()
{
  switch (group)
  {
    case GROUP_0:
      switch (idx)
      {
        case G0_R2D2:
          // write your action code here
          group = GROUP_1;  //change to command recognition
          break;
      }
      break;
    case GROUP_1:
      switch (idx)
      {
        case G1_CHEERFUL:
          xbee.write("a");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_COME_HERE:
          xbee.write("b");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_CONCERNED:
          xbee.write("c");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_DETERMINED:
          xbee.write("d");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_EUREKA:
          xbee.write("e");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_EXCITED:
          xbee.write("f");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_FART:
          xbee.write("g");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_FRAZZLED:
          xbee.write("h");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_HELLO:
          xbee.write("i");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_INTERESTED:
          xbee.write("j");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_LAUGH:
          xbee.write("k");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_PLAYFUL:
          xbee.write("l");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_QUESTION:
          xbee.write("m");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_READY:
          xbee.write("n");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_SAD:
          xbee.write("o");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_SARCASTIC:
          xbee.write("p");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_SASSY:
          xbee.write("q");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_SCREAM:
          xbee.write("r");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_SHOCKED:
          xbee.write("s");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_SHY:
          xbee.write("t");
          group = GROUP_0;  //change to trigger recognition
          break;
        case G1_SURPRISE:
          xbee.write("u");
          group = GROUP_0;  //change to trigger recognition
          break;
      }
      break;
  }
}
